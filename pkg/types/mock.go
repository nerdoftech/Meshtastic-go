// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package types is a generated GoMock package.
package types

import (
	gomock "github.com/golang/mock/gomock"
	message "github.com/nerdoftech/Meshtastic-go/pkg/message"
	reflect "reflect"
)

// MockMeshInterface is a mock of MeshInterface interface.
type MockMeshInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMeshInterfaceMockRecorder
}

// MockMeshInterfaceMockRecorder is the mock recorder for MockMeshInterface.
type MockMeshInterfaceMockRecorder struct {
	mock *MockMeshInterface
}

// NewMockMeshInterface creates a new mock instance.
func NewMockMeshInterface(ctrl *gomock.Controller) *MockMeshInterface {
	mock := &MockMeshInterface{ctrl: ctrl}
	mock.recorder = &MockMeshInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshInterface) EXPECT() *MockMeshInterfaceMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockMeshInterface) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockMeshInterfaceMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMeshInterface)(nil).Connect))
}

// GetRadioConfig mocks base method.
func (m *MockMeshInterface) GetRadioConfig() *message.RadioConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRadioConfig")
	ret0, _ := ret[0].(*message.RadioConfig)
	return ret0
}

// GetRadioConfig indicates an expected call of GetRadioConfig.
func (mr *MockMeshInterfaceMockRecorder) GetRadioConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRadioConfig", reflect.TypeOf((*MockMeshInterface)(nil).GetRadioConfig))
}

// Close mocks base method.
func (m *MockMeshInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockMeshInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMeshInterface)(nil).Close))
}

// MockTransportInterface is a mock of TransportInterface interface.
type MockTransportInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransportInterfaceMockRecorder
}

// MockTransportInterfaceMockRecorder is the mock recorder for MockTransportInterface.
type MockTransportInterfaceMockRecorder struct {
	mock *MockTransportInterface
}

// NewMockTransportInterface creates a new mock instance.
func NewMockTransportInterface(ctrl *gomock.Controller) *MockTransportInterface {
	mock := &MockTransportInterface{ctrl: ctrl}
	mock.recorder = &MockTransportInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransportInterface) EXPECT() *MockTransportInterfaceMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockTransportInterface) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockTransportInterfaceMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockTransportInterface)(nil).Connect))
}

// SendToRadio mocks base method.
func (m *MockTransportInterface) SendToRadio(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToRadio", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToRadio indicates an expected call of SendToRadio.
func (mr *MockTransportInterfaceMockRecorder) SendToRadio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToRadio", reflect.TypeOf((*MockTransportInterface)(nil).SendToRadio), arg0)
}

// Listen mocks base method.
func (m *MockTransportInterface) Listen() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Listen")
}

// Listen indicates an expected call of Listen.
func (mr *MockTransportInterfaceMockRecorder) Listen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockTransportInterface)(nil).Listen))
}

// Close mocks base method.
func (m *MockTransportInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockTransportInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTransportInterface)(nil).Close))
}

// MockReadWriteCloseFlusher is a mock of ReadWriteCloseFlusher interface.
type MockReadWriteCloseFlusher struct {
	ctrl     *gomock.Controller
	recorder *MockReadWriteCloseFlusherMockRecorder
}

// MockReadWriteCloseFlusherMockRecorder is the mock recorder for MockReadWriteCloseFlusher.
type MockReadWriteCloseFlusherMockRecorder struct {
	mock *MockReadWriteCloseFlusher
}

// NewMockReadWriteCloseFlusher creates a new mock instance.
func NewMockReadWriteCloseFlusher(ctrl *gomock.Controller) *MockReadWriteCloseFlusher {
	mock := &MockReadWriteCloseFlusher{ctrl: ctrl}
	mock.recorder = &MockReadWriteCloseFlusherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadWriteCloseFlusher) EXPECT() *MockReadWriteCloseFlusherMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockReadWriteCloseFlusher) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReadWriteCloseFlusherMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadWriteCloseFlusher)(nil).Read), p)
}

// Write mocks base method.
func (m *MockReadWriteCloseFlusher) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockReadWriteCloseFlusherMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockReadWriteCloseFlusher)(nil).Write), p)
}

// Close mocks base method.
func (m *MockReadWriteCloseFlusher) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReadWriteCloseFlusherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadWriteCloseFlusher)(nil).Close))
}

// Flush mocks base method.
func (m *MockReadWriteCloseFlusher) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockReadWriteCloseFlusherMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockReadWriteCloseFlusher)(nil).Flush))
}
